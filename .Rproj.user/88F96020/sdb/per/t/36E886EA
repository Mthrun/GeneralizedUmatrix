{
    "collab_server" : "",
    "contents" : "uniquePoints <- function(Points){\n# U <- uniquePoints(Points)\n# return only the unique points in Points\n#\n# INPUT\n# Points[1:n,1:d]   The vector/matrix with n Points points of dimension d \n#\t\t\t\t          the points are in the  rows  \n#\n# OUTPUT\n# a list U containg:\n# UniquePoints  <- U$unique[1:u,1:d]       the Points points  without duplicate points\n# UniqueInd   <- U$sortind[1:u]\t\t       an index vector such that unique ==  Points[sortind,]\n# Uniq2PointsInd<- U$mergeind[1:n] \t       an index vector such that   Points ==  unique[mergeind,]\n# IsDuplicate <- U$IsDuplicate[1:n,1:n]  for i!=j IsDuplicate[i,j]== 1  iff Points[i,] == Points[j,] ;  IsDuplicate[i,i]==0\n\n  eps <- 0.0000000001         # ab dieser Distanz zwischen 2 punkten sind diese identisch\n  \n  \n  if(class(Points)!=\"matrix\"){ # If Points is a vector.\n    Points <- as.matrix(Points)\n  }\n  AnzPoints <- nrow(Points)            # soviele punkte in den Daten\n  rownames(Points) <- c(1:AnzPoints)   # gib den Zeilen als namen ihren zeilennummer\n  dists <- as.matrix(dist(Points))     # Distance with diagonal = 0.\n  IsDuplicate = (dists<eps)*1 - diag(AnzPoints)\n  dists <- dists-(dists*upper.tri(dists, diag = T))+upper.tri(dists, diag = T) # ??? wozu das denn?\n\n  if(length(which(dists<eps))>0){ # Duplicates found.\n    ind <- which(dists<eps,arr.ind=TRUE) # Get indices of duplicates.\n#    rownames(ind) <- ind[,1]\n    ind <- ind[as.character(unique(ind[,1])),]; # remove multiples in the duplicates, so that only their first occurance remains. Example: if 1, 3, 4, and 6 are all duplicates of the same value, ind will contain [3,1], [4,1], [4,3], [6,1], [6,3] and [6,4]. This removes all except [3,1], [4,1] and [6,1]\n    uniquePoints <- Points[-as.matrix(ind)[,1],] #MT: Korrektur, falls genau eine Dopplung besteht\n    mergeind <- c(1:AnzPoints)\n    indhelp <- c(1:nrow(uniquePoints)) \n    names(indhelp) <- rownames(uniquePoints)\n    mergeind[as.numeric(names(indhelp))] <- indhelp\n     if(ncol(as.matrix(ind))==1){\n        mergeind[as.matrix(ind)[,1]]= as.matrix(ind)[,1]#MT: Schnellschuss Workaround\n     }else{\n        mergeind[ind[,1]] <- mergeind[ind[,2]] # Pointsindex with marked duplicates\n     }\n    return(list(\"unique\"=as.matrix(uniquePoints), \"sortind\"= as.numeric(rownames(uniquePoints)),\"mergeind\"=mergeind,IsDuplicate=IsDuplicate))\n  }else{# keine duplikate gefunden\n    return(list(\"unique\"= unique(Points), \"sortind\"=c(1:AnzPoints),\"mergeind\"=c(1:AnzPoints),IsDuplicate=IsDuplicate))\n  }# end   if(length(which(dists<eps))>0){ # Duplicates found.\n}# end\n",
    "created" : 1489409852835.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4223141944",
    "id" : "36E886EA",
    "lastKnownWriteTime" : 1489409984,
    "last_content_update" : 1489409984633,
    "path" : "D:/Subversion/PUB/CRANupload/GeneralizedUmatrix/R/uniquePoints.R",
    "project_path" : "R/uniquePoints.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}