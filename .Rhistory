is.na(ArgsAnfang_ind[1])
ArgsEnde_ind=stringr::str_locate(FunctionNameAndOutput,"\\=")
ArgsAnfang_ind=stringr::str_locate(FunctionNameAndOutput,"n")
substr(FunctionNameAndOutput,start = ArgsAnfang_ind+1,stop = ArgsEnde_ind-1)
substr(FunctionNameAndOutput,start = ArgsAnfang_ind+1,stop = ArgsEnde_ind-1)
stringr::str_locate(FunctionNameAndOutput,"n")
ArgsAnfang_ind=stringr::str_locate(FunctionNameAndOutput,"function")
ArgsEnde_ind=stringr::str_locate(FunctionNameAndOutput,"\\=")
OutputArgs=substr(FunctionNameAndOutput,start = ArgsAnfang_ind[2]+1,stop = ArgsEnde_ind[1]-1)
#leerzeichen leoschen, von einzelnem argument
OutputArgs=gsub("\t","",OutputArgs)
OutputArgs=gsub("  ","",OutputArgs)
OutputArgs=gsub(" ","",OutputArgs)
funname_indstart=stringr::str_locate(FunctionNameAndOutput,"\\=")
funname_indstart
funname_end=stringr::str_locate(FunctionNameAndOutput,"\\(")
Funname=substr(FunctionNameAndOutput,start = funname_indstart+1,stop = funname_end-1)
funname_indstart+1
source("D:/Subversion/PUB/dbt/RetroMAT/R/TranslateMatlabBackBone2R.R")
source("D:/Subversion/PUB/dbt/RetroMAT/R/TranslateMatlabBackBone2R.R")
TranslateMatlabBackBone2R(funnames[i],Inputdir = path,Outputdir =path )
Matlab2RFunctionLine=function(FunctionNameAndOutput){
ArgsAnfang_ind=stringr::str_locate(FunctionNameAndOutput,"\\[")
ArgsEnde_ind=stringr::str_locate(FunctionNameAndOutput,"\\]")
funname_indstart=stringr::str_locate(FunctionNameAndOutput,"\\=")
if(is.na(ArgsAnfang_ind[1])){#keine eckigen klammern existend
ArgsAnfang_ind=stringr::str_locate(FunctionNameAndOutput,"function")
OutputArgs=substr(FunctionNameAndOutput,start = ArgsAnfang_ind[2]+1,stop = funname_indstart[1]-1)
#leerzeichen leoschen, von einzelnem argument
OutputArgs=gsub("\t","",OutputArgs)
OutputArgs=gsub("  ","",OutputArgs)
OutputArgs=gsub(" ","",OutputArgs)
}else{
OutputArgs=substr(FunctionNameAndOutput,start = ArgsAnfang_ind[1]+1,stop = ArgsEnde_ind[1]-1)
}
funname_end=stringr::str_locate(FunctionNameAndOutput,"\\(")
Funname=substr(FunctionNameAndOutput,start = funname_indstart[1]+1,stop = funname_end[1]-1)
inputargsend_ind=stringr::str_locate(FunctionNameAndOutput,"\\)")
InputArgs=substr(FunctionNameAndOutput,start = funname_end[1],stop = inputargsend_ind[1])
return(list(OutputArgs=OutputArgs,Funname=gsub(pattern = " ","",x = Funname),InputArgs=InputArgs))
}
ReplaceMatlabFunctionInCode=function(CodeLines,NameOfFun="size"){
indListe=stringr::str_locate_all(CodeLines,pattern=paste0(NameOfFun,"\\("))
ind_size=which(sapply(indListe,length,simplify = T)>0)
if(length(ind_size)>0){
for(i in 1:length(ind_size)){
size_line=CodeLines[ind_size[i]]
IndSelect=unlist(indListe[ind_size[i]])
V=Matlab2RFunctionLine(size_line)
splitOutputargs=unlist(strsplit(V$OutputArgs,"\\,"))
for(args in 1:length(splitOutputargs)){
if(args==1){
outputstring=paste0(splitOutputargs[args]," = V$",splitOutputargs[args],"; ")
}else{
outputstring=paste0(outputstring,splitOutputargs[args]," = V$",splitOutputargs[args],"; ")
}
}
ReplaceLine=paste0("V=",NameOfFun,V$InputArgs,"; ",outputstring)
CodeLines[ind_size[i]]=ReplaceLine
}
}
return(CodeLines)
}
FindMatlabFunctions=function(CodeLines){
#assumption: no lines with ";" exist in CodeLines because they were priorly splitted
indMatrix=stringr::str_locate(CodeLines,pattern="\\[")
ind_lines=which(indMatrix[,1]==1) #Startline
Ind_lines=NULL
FunName=NULL
if(length(ind_lines)>0){
for(i in 1:length(ind_lines)){
FunctionLine=CodeLines[ind_lines[i]]
V=Matlab2RFunctionLine(FunctionLine)
if(i==1)
FunName=V$Funname
else
FunName=c(FunName,V$Funname)
}
}
return(list(Ind_lines=ind_lines,FunName=FunName))
}
#Patterns <- read.delim("MRcinderellaALPODSClassify.m",header = F)
Patterns <- read.delim(dbt.DataIO::addext(Funname,"m"),header = F)
PatternsList=strsplit(as.character(Patterns$V1),"\\;")
Funname = funnames[i];Inputdir = path;Outputdir =path
#Patterns <- read.delim("MRcinderellaALPODSClassify.m",header = F)
Patterns <- read.delim(dbt.DataIO::addext(Funname,"m"),header = F)
PatternsList=strsplit(as.character(Patterns$V1),"\\;")
Lines=lapply(Patterns, function(x) stringr::str_locate(string = x,"function"))
Patterns=unlist(PatternsList)
FunctionLineInd=which(!is.na(Lines))
if(FunctionLineInd>1) warning("Prior Lines to 'function' are ignored")
Patterns=Patterns[FunctionLineInd:length(Patterns)]
V=Matlab2RFunctionLine(Patterns[1])
if(is.na(V$Funname)){
warning("TranslateMatlabBackBone2R: Function header not found, returning NULL")
return(NULL)
}
if(Funname!=V$Funname){
warning("TranslateMatlabBackBone2R: Internal function name is not the same as the name of the file. Using Filename as function name.")
}else{
Funname=V$Funname
}
OutputArgs=V$OutputArgs
InputArgs=V$InputArgs
FirstLineR=paste0(Funname," = function",InputArgs,"{")
ListeLine=paste0("V=list(",OutputArgs,")")
OutputArgs2Names=paste0("'",gsub("\\,","','",OutputArgs),"'")
NamesLinesLine=paste0("names(V) = c(",OutputArgs2Names,")")
ReturnLine=paste0("return(V)}")
Patterns=Patterns[-1]
V=FindMatlabFunctions(Patterns)
Ind_lines=V$Ind_lines
FunNames=V$FunName
if(!is.null(FunNames)){#es gibt unter funktionen die aufgerufen werden
for(lines in 1:length(Ind_lines)){
NameOfFun=gsub(" ","",FunNames[lines])
RLine=ReplaceMatlabFunctionInCode(Patterns[Ind_lines[lines]],NameOfFun = NameOfFun)
if(NameOfFun=="size"){
RLine=gsub("\\$n","[1]",RLine)
RLine=gsub("\\$d","[2]",RLine)
RLine=gsub("size","dim",RLine)
}
Patterns[Ind_lines[lines]]=RLine
}
}
FunNames
CodeLines = Patterns:
CodeLines = Patterns
#assumption: no lines with ";" exist in CodeLines because they were priorly splitted
#assumption function has more than one output argument
#otherwise they cant be disnguished from matrix/vector calls
#e.g. RightCompClass   = UniqueConnCls(RightCompInd);   #UniqueConnCls can be either vector or function
indMatrix=stringr::str_locate(CodeLines,pattern="\\[")
ind_lines=which(indMatrix[,1]==1) #Startline
Ind_lines=NULL
FunName=NULL
indMatrix
indMatrix
indMatrix[,1]
CodeLines[45]
CodeLines[44]
CodeLines[46]
CodeLines[47]
CodeLines[48]
CodeLines[489
CodeLines[49]
CodeLines[50]
CodeLines[51]
CodeLines[52]
CodeLines[53]
CodeLines[54]
CodeLines[55]
CodeLines[56]
CodeLines[57]
CodeLines[58]
CodeLines[59]
CodeLines[60]
CodeLines[61]
CodeLines[62]
CodeLines[63]
CodeLines[64]
CodeLines[65]
CodeLines[66]
CodeLines[67]
CodeLines[68]
CodeLines[69]
CodeLines[70]
CodeLines[71]
CodeLines[72]
CodeLines[73]
CodeLines[74]
CodeLines[75]
CodeLines[76]
CodeLines[77]
indMatrix[,1]
indMatrix[,1]
CodeLines[77]
#assumption: no lines with ";" exist in CodeLines because they were priorly splitted
#assumption function has more than one output argument
#otherwise they cant be disnguished from matrix/vector calls
#e.g. RightCompClass   = UniqueConnCls(RightCompInd);   #UniqueConnCls can be either vector or function
CodeLines=gsub(" ",CodeLines)
#assumption: no lines with ";" exist in CodeLines because they were priorly splitted
#assumption function has more than one output argument
#otherwise they cant be disnguished from matrix/vector calls
#e.g. RightCompClass   = UniqueConnCls(RightCompInd);   #UniqueConnCls can be either vector or function
CodeLines=gsub(" ","",CodeLines)
CodeLines[77]
(CodeLines,pattern="\\[")
indMatrix=stringr::str_locate(CodeLines,pattern="\\[")
ind_lines=which(indMatrix[,1]==1) #Startline
ind_lines
Ind_lines=NULL
FunName=NULL
if(length(ind_lines)>0){
for(i in 1:length(ind_lines)){
FunctionLine=CodeLines[ind_lines[i]]
V=Matlab2RFunctionLine(FunctionLine)
if(i==1)
FunName=V$Funname
else
FunName=c(FunName,V$Funname)
}
}
FunName
i=1
FunctionLine=CodeLines[ind_lines[i]]
FunctionLine
Matlab2RFunctionLine=function(FunctionNameAndOutput){
ArgsAnfang_ind=stringr::str_locate(FunctionNameAndOutput,"\\[")
ArgsEnde_ind=stringr::str_locate(FunctionNameAndOutput,"\\]")
funname_indstart=stringr::str_locate(FunctionNameAndOutput,"\\=")
if(is.na(funname_indstart[1])){
#doch keine function
return(list(OutputArgs=MULL,Funname=NULL,InputArgs=NULL))
}
if(is.na(ArgsAnfang_ind[1])){#keine eckigen klammern existend
ArgsAnfang_ind=stringr::str_locate(FunctionNameAndOutput,"function")
OutputArgs=substr(FunctionNameAndOutput,start = ArgsAnfang_ind[2]+1,stop = funname_indstart[1]-1)
#leerzeichen leoschen, von einzelnem argument
OutputArgs=gsub("\t","",OutputArgs)
OutputArgs=gsub("  ","",OutputArgs)
OutputArgs=gsub(" ","",OutputArgs)
}else{
OutputArgs=substr(FunctionNameAndOutput,start = ArgsAnfang_ind[1]+1,stop = ArgsEnde_ind[1]-1)
}
funname_end=stringr::str_locate(FunctionNameAndOutput,"\\(")
Funname=substr(FunctionNameAndOutput,start = funname_indstart[1]+1,stop = funname_end[1]-1)
inputargsend_ind=stringr::str_locate(FunctionNameAndOutput,"\\)")
InputArgs=substr(FunctionNameAndOutput,start = funname_end[1],stop = inputargsend_ind[1])
return(list(OutputArgs=OutputArgs,Funname=gsub(pattern = " ","",x = Funname),InputArgs=InputArgs))
}
FunctionLine
V=Matlab2RFunctionLine(FunctionLine)
Matlab2RFunctionLine=function(FunctionNameAndOutput){
ArgsAnfang_ind=stringr::str_locate(FunctionNameAndOutput,"\\[")
ArgsEnde_ind=stringr::str_locate(FunctionNameAndOutput,"\\]")
funname_indstart=stringr::str_locate(FunctionNameAndOutput,"\\=")
if(is.na(funname_indstart[1])){
#doch keine function
return(list(OutputArgs=NULL,Funname=NULL,InputArgs=NULL))
}
if(is.na(ArgsAnfang_ind[1])){#keine eckigen klammern existend
ArgsAnfang_ind=stringr::str_locate(FunctionNameAndOutput,"function")
OutputArgs=substr(FunctionNameAndOutput,start = ArgsAnfang_ind[2]+1,stop = funname_indstart[1]-1)
#leerzeichen leoschen, von einzelnem argument
OutputArgs=gsub("\t","",OutputArgs)
OutputArgs=gsub("  ","",OutputArgs)
OutputArgs=gsub(" ","",OutputArgs)
}else{
OutputArgs=substr(FunctionNameAndOutput,start = ArgsAnfang_ind[1]+1,stop = ArgsEnde_ind[1]-1)
}
funname_end=stringr::str_locate(FunctionNameAndOutput,"\\(")
Funname=substr(FunctionNameAndOutput,start = funname_indstart[1]+1,stop = funname_end[1]-1)
inputargsend_ind=stringr::str_locate(FunctionNameAndOutput,"\\)")
InputArgs=substr(FunctionNameAndOutput,start = funname_end[1],stop = inputargsend_ind[1])
return(list(OutputArgs=OutputArgs,Funname=gsub(pattern = " ","",x = Funname),InputArgs=InputArgs))
}
V=Matlab2RFunctionLine(FunctionLine)
ind_lines
FindMatlabFunctions=function(CodeLines){
#assumption: no lines with ";" exist in CodeLines because they were priorly splitted
#assumption function has more than one output argument
#otherwise they cant be disnguished from matrix/vector calls
#e.g. RightCompClass   = UniqueConnCls(RightCompInd);   #UniqueConnCls can be either vector or function
CodeLines=gsub(" ","",CodeLines)#enrueckungen raus
indMatrix=stringr::str_locate(CodeLines,pattern="\\[")
ind_lines=which(indMatrix[,1]==1) #Startline
Ind_lines=NULL
FunName=NULL
ind_line_todel=c()
if(length(ind_lines)>0){
for(i in 1:length(ind_lines)){
FunctionLine=CodeLines[ind_lines[i]]
V=Matlab2RFunctionLine(FunctionLine)
if(!is.null(V$Funname)){
if(i==1)
FunName=V$Funname
else
FunName=c(FunName,V$Funname)
}else{
ind_line_todel=c(ind_line_todel,i)
}
}#end for length ind lines
}# end if length(ind_lines)>0
if(length(ind_line_todel)>0){
ind_lines=ind_lines[-ind_line_todel]
}
return(list(Ind_lines=ind_lines,FunName=FunName))
}
V=FindMatlabFunctions(CodeLines = Patterns)
V
ClusterCount()
ClusterCount
if(!is.null(FunNames)){#es gibt unter funktionen die aufgerufen werden
for(lines in 1:length(Ind_lines)){
NameOfFun=gsub(" ","",FunNames[lines])
RLine=ReplaceMatlabFunctionInCode(Patterns[Ind_lines[lines]],NameOfFun = NameOfFun)
if(NameOfFun=="size"){
RLine=gsub("\\$n","[1]",RLine)
RLine=gsub("\\$d","[2]",RLine)
RLine=gsub("size","dim",RLine)
}
#spezialfall hier
if(NameOfFun=="ClassCount"){
RLine=gsub("ClassCount","FCPS::ClusterCount",RLine)
}
Patterns[Ind_lines[lines]]=RLine
}
}
V=FindMatlabFunctions(CodeLines = Patterns)
V
for(lines in 1:length(Ind_lines)){
NameOfFun=gsub(" ","",FunNames[lines])
RLine=ReplaceMatlabFunctionInCode(Patterns[Ind_lines[lines]],NameOfFun = NameOfFun)
if(NameOfFun=="size"){
RLine=gsub("\\$n","[1]",RLine)
RLine=gsub("\\$d","[2]",RLine)
RLine=gsub("size","dim",RLine)
}
#spezialfall hier
if(NameOfFun=="ClassCount"){
RLine=gsub("ClassCount","FCPS::ClusterCount",RLine)
}
Patterns[Ind_lines[lines]]=RLine
}
i
V=FindMatlabFunctions(CodeLines = Patterns)
Ind_lines=V$Ind_lines
FunNames=V$FunName
NameOfFun=gsub(" ","",FunNames[lines])
NameOfFun
v
FunNames[lines]
FunNames[1]
lines=1
NameOfFun=gsub(" ","",FunNames[lines])
RLine=ReplaceMatlabFunctionInCode(Patterns[Ind_lines[lines]],NameOfFun = NameOfFun)
RLine
if(NameOfFun=="size"){
RLine=gsub("\\$n","[1]",RLine)
RLine=gsub("\\$d","[2]",RLine)
RLine=gsub("size","dim",RLine)
}
#spezialfall hier
if(NameOfFun=="ClassCount"){
RLine=gsub("ClassCount","FCPS::ClusterCount",RLine)
}
Patterns[Ind_lines[lines]]=RLine
for(lines in 1:length(Ind_lines)){
NameOfFun=gsub(" ","",FunNames[lines])
RLine=ReplaceMatlabFunctionInCode(Patterns[Ind_lines[lines]],NameOfFun = NameOfFun)
if(NameOfFun=="size"){
RLine=gsub("\\$n","[1]",RLine)
RLine=gsub("\\$d","[2]",RLine)
RLine=gsub("size","dim",RLine)
}
#spezialfall hier
if(NameOfFun=="ClassCount"){
RLine=gsub("ClassCount","FCPS::ClusterCount",RLine)
}
Patterns[Ind_lines[lines]]=RLine
}
if(!is.null(FunNames)){#es gibt unter funktionen die aufgerufen werden
for(lines in 1:length(Ind_lines)){
NameOfFun=gsub(" ","",FunNames[lines])
RLine=ReplaceMatlabFunctionInCode(Patterns[Ind_lines[lines]],NameOfFun = NameOfFun)
if(NameOfFun=="size"){
RLine=gsub("\\$n","[1]",RLine)
RLine=gsub("\\$d","[2]",RLine)
RLine=gsub("size","dim",RLine)
}
#spezialfall hier
if(NameOfFun=="ClassCount"){
RLine=gsub("ClassCount","FCPS::ClusterCount",RLine)
}
Patterns[Ind_lines[lines]]=RLine
}
}
#reihenfolge der ersetzungen ist wichtig!
#typical functions
#koennen auch nur einzelne output-argumente haben
Patterns=stringr::str_replace_all(Patterns,pattern = "find\\(","which\\(")
Patterns=stringr::str_replace_all(Patterns,pattern = "while\\(","while\\{")
Patterns=stringr::str_replace_all(Patterns,pattern = "slog\\(","SignedLog\\(")
Patterns=stringr::str_replace_all(Patterns,pattern = "str2num\\(","as.numeric\\(")
Patterns=stringr::str_replace_all(Patterns,pattern = "num2str\\(","paste\\(")
#for loops
Patterns=stringr::str_replace_all(Patterns,pattern = "for i=","for\\(i in ")
Patterns=stringr::str_replace_all(Patterns,pattern = "for k=","for\\(k in ")
Patterns=stringr::str_replace_all(Patterns,pattern = "for j=","for\\(j in ")
Patterns=stringr::str_replace_all(Patterns,pattern = "for c=","for\\(c in ")
Patterns=stringr::str_replace_all(Patterns,pattern = "for i =","for\\(i in ")
Patterns=stringr::str_replace_all(Patterns,pattern = "for k =","for\\(k in ")
Patterns=stringr::str_replace_all(Patterns,pattern = "for j =","for\\(j in ")
Patterns=stringr::str_replace_all(Patterns,pattern = "for c =","for\\(c in ")
#start of condtion
Patterns=stringr::str_replace_all(Patterns,pattern = "if","if( ")
Patterns=stringr::str_replace_all(Patterns,pattern = "else","\\}else\\{")
#end of vector
Patterns=stringr::str_replace_all(Patterns,pattern = "\\:end","length\\(\\)")
#end of condition
Patterns=stringr::str_replace_all(Patterns,pattern = "end;","\\}")
Patterns=stringr::str_replace_all(Patterns,pattern = "end","\\}")
#typical selections of matrices
#specific column
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(:,i\\)","\\[,i\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(:,j\\)","\\[,j\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(:,k\\)","\\[,k\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(:,c\\)","\\[,c\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(:,ind\\)","\\[,ind\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(:,Ind\\)","\\[,Ind\\]")
#specific row
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(i,:\\)","\\[i,\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(j,:\\)","\\[j,\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(k,:\\)","\\[k,\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(c,:\\)","\\[c,\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(ind,:\\)","\\[ind,\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(Ind,:\\)","\\[Ind,\\]")
#dont know why thats needed ....
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(ind\\)","\\[ind\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(Ind\\)","\\[Ind\\]")
#usual selected elements of vectors
Patterns=stringr::str_replace_all(Patterns,pattern = "\\[k\\]","\\(k\\)")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\[i\\]","\\(i\\)")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\[j\\]","\\(j\\)")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\[c\\]","\\(c\\)")
#usual simpel vector of indices
Patterns=stringr::str_replace_all(Patterns,pattern = "\\[1:n\\]","c\\(1:n\\)")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\[1:N\\]","c\\(1:N\\)")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\[1:d\\]","c\\(1:d\\)")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\[1:D\\]","c\\(1:D\\)")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\[1:c\\]","c\\(1:c\\)")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\[1:C\\]","c\\(1:C\\)")
#selects all rows
Patterns=stringr::str_replace_all(Patterns,pattern = "\\(:","\\[")
#selects all columns
Patterns=stringr::str_replace_all(Patterns,pattern = ":\\)","\\]")
#negations
Patterns=stringr::str_replace_all(Patterns,pattern = "\\~=","\\!=")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\~","\\!")
#Patterns=stringr::str_replace_all(Patterns,pattern = "\\) &\\("," & ")
#Patterns=stringr::str_replace_all(Patterns,pattern = "\\) & \\("," & ")
#Patterns=stringr::str_replace_all(Patterns,pattern = "\\)&\\("," & ")
#diverse brackets
Patterns=stringr::str_replace_all(Patterns,pattern = "\\) = ","\\] = ")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\) =","\\] = ")
Patterns=stringr::str_replace_all(Patterns,pattern = "\\)=","\\] = ")
Patterns=stringr::str_replace_all(Patterns,pattern = "c\\(\\)","c\\[\\]")
Patterns=stringr::str_replace_all(Patterns,pattern = "c\\(\\)","c\\[ \\]")
#comments
#achtung zerhaut sprintf('%s') usw.
Patterns=stringr::str_replace_all(Patterns,pattern = "\\%","\\#")
#alpods keywords
Patterns=stringr::str_replace_all(Patterns,pattern = "PopulationNumber\\(","PopulationNumber\\[")
Patterns=stringr::str_replace_all(Patterns,pattern = "RuleCls\\(","RuleCls\\[")
R_Patterns=c(FirstLineR,Patterns,ListeLine,NamesLinesLine,ReturnLine)
source("D:/Subversion/PUB/dbt/RetroMAT/R/TranslateMatlabBackBone2R.R")
#step 1: transfer
for(i in 1:length(files)){
TranslateMatlabBackBone2R(funnames[i],Inputdir = path,Outputdir =path )
}
i
source("D:/Subversion/PUB/dbt/RetroMAT/R/TranslateMatlabBackBone2R.R")
#step 1: transfer
for(i in 1:length(files)){
TranslateMatlabBackBone2R(funnames[i],Inputdir = path,Outputdir =path )
}
source("D:/Subversion/PUB/dbt/RetroMAT/R/TranslateMatlabBackBone2R.R")
#step 1: transfer
for(i in 1:length(files)){
TranslateMatlabBackBone2R(funnames[i],Inputdir = path,Outputdir =path )
}
source("D:/Subversion/PUB/dbt/RetroMAT/R/TranslateMatlabBackBone2R.R")
source("D:/Subversion/PUB/dbt/RetroMAT/R/TranslateMatlabBackBone2R.R")
#step 1: transfer
for(i in 1:length(files)){
TranslateMatlabBackBone2R(funnames[i],Inputdir = path,Outputdir =path )
}
i
source("D:/Subversion/PUB/dbt/RetroMAT/R/TranslateMatlabBackBone2R.R")
#step 1: transfer
for(i in 1:length(files)){
TranslateMatlabBackBone2R(funnames[i],Inputdir = path,Outputdir =path )
}
source("D:/Subversion/PUB/dbt/RetroMAT/R/TranslateMatlabBackBone2R.R")
#step 1: transfer
for(i in 1:length(files)){
TranslateMatlabBackBone2R(funnames[i],Inputdir = path,Outputdir =path )
}
source("D:/Subversion/PUB/dbt/RetroMAT/R/TranslateMatlabBackBone2R.R")
#step 1: transfer
for(i in 1:length(files)){
TranslateMatlabBackBone2R(funnames[i],Inputdir = path,Outputdir =path )
}
?ClusterCount
ClassMedian
?min
kmeansClustering
?ClusterCount
?HierarchicalClustering
?ClassMedian
prctile
?DatabionicSwarm::ShortestGraphPathsC
?DatabionicSwarm::DijkstraSSSP
source("D:/Subversion/PUB/dbt/GeneralizedUmatrix/R/GenerateIslandImx.R")
tileGUM
DelaunayGraphMatrix
?Delaunay
?DelaunayGraphMatrix
source("D:/Subversion/PUB/dbt/GeneralizedUmatrix/R/BMtoXY.R")
